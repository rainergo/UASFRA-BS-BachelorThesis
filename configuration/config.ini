[DEFAULT]
base_path = D:/A_STUDIUM/PYTHON/UASFRA-BS-BachelorThesis

[Model.General]
test_set_size = 0.3
num_cv_folds = 5
scoring = ['roc_auc']

[Model.CV.Preprocessing]
# In the respective columns, fill in the feature names in parenthesis ('') separated by comma (,)
# If all columns shall be processed, replace empty list bracket by 'All'
impute = {'impute_columns': [], 'impute_strategy': 'median', 'impute_knn_num_neighbors': 3}
winsorize = {'winsorize_columns': [], 'winsorize_lower_bound': 0.00, 'winsorize_upper_bound': 1.00 }
scale = {'scale_columns': 'All', 'scale_strategy': 'standard', 'scale_min_max_range': (0, 1), 'scale_robust_quantile_range': (25, 75)}

[Model.Hyperparams]
logit = {'C': [0.1], 'class_weight': [None], 'dual': [False], 'fit_intercept': [True], 'intercept_scaling': [1], 'l1_ratio': [None], 'max_iter': [100], 'multi_class': ['auto'], 'n_jobs': [None], 'penalty': ['l2'], 'random_state': [None], 'solver': ['lbfgs'], 'tol': [0.0001], 'verbose': [0], 'warm_start': [False]}
rfc = {'bootstrap': [True], 'ccp_alpha': [0.0], 'class_weight': [None], 'criterion': ['gini'], 'max_depth': [None], 'max_features': ['log2'], 'max_leaf_nodes': [None], 'max_samples': [None], 'min_impurity_decrease': [0.0], 'min_impurity_split': [None], 'min_samples_leaf': [10], 'min_samples_split': [20], 'min_weight_fraction_leaf': [0.0], 'n_estimators': [100], 'n_jobs': [None], 'oob_score': [False], 'random_state': [None], 'verbose': [0], 'warm_start': [False]}
xgb = {'objective': ['binary:logistic'], 'base_score': [None], 'booster': [None], 'colsample_bylevel': [None], 'colsample_bynode': [None], 'colsample_bytree': [None], 'gamma': [None], 'gpu_id': [None], 'importance_type': ['gain'], 'interaction_constraints': [None], 'learning_rate': [None], 'max_delta_step': [None], 'max_depth': [None], 'min_child_weight': [10], 'missing': [np.nan], 'monotone_constraints': [None], 'n_estimators': [200], 'n_jobs': [None], 'num_parallel_tree': [None], 'random_state': [None], 'reg_alpha': [None], 'reg_lambda': [None], 'scale_pos_weight': [None], 'subsample': [None], 'tree_method': [None], 'validate_parameters': [None], 'verbosity': [None]}

[Model.Explanation]
shap_background_data_num_samples = 100
# For what set shall SHAP-values be calculated? test set ("test"), train set ("train") or monthly ("monthly") data?:
shap_data_for_explanation = train
shap_max_num_explanation_data_rows = 20000

[Original.Model.Training]
file_path = %(base_path)s/Data/OriginalModel/Training/
learn_data_preprocessed = orig_learn_data_preprocessed.zip

[Original.Model.Monthly]
file_path =  %(base_path)s/Data/OriginalModel/Monthly/
data_for_prediction = prediction_data.zip
result_dataframe = result_dataframe.csv
quantile_portfolio = quantile_portfolio.zip
prediction_input_object =  {'RFC': 'prediction_input_object_rfc.joblib', 'Logit': 'prediction_input_object_logit.joblib', 'XGB': 'prediction_input_object_xgb.joblib'}

[Original.Model.Models]
file_path =  %(base_path)s/Data/OriginalModel/Models/
logit = logit.joblib
rfc = rfc.joblib
xgb = xgb.joblib

[Original.Model.Explanation]
file_path = %(base_path)s/Data/OriginalModel/Explanation/
explanation_input_object =  {'RFC': 'explanation_input_object_rfc.joblib', 'Logit': 'explanation_input_object_logit.joblib', 'XGB': 'explanation_input_object_xgb.joblib'}

[Transfer.Model.Cutoff]
estimators_for_cutoff = ['RandomForestClassifier', 'LogisticRegression', 'XGBClassifier']
cutoff_threshold = 90.0

[Transfer.Model.Training]
file_path =  %(base_path)s/Data/TransferModel/Training/
learn_data_feat_engineered = zv_1_3_feat_engineered.zip
transfer_model_input_object = {'RFC': 'transfer_model_input_object_rfc.joblib', 'Logit': 'transfer_model_input_object_logit.joblib', 'XGB': 'transfer_model_input_object_xgb.joblib'}

[Transfer.Model.Models]
file_path =  %(base_path)s/Data/TransferModel/Models/
logit = trans_logit.joblib
rfc = trans_rfc.joblib
xgb = trans_xgb.joblib

[Transfer.Model.Explanation]
file_path = %(base_path)s/Data/TransferModel/Explanation/
explanation_input_object = {'RFC': 'explanation_input_object_rfc.joblib', 'Logit': 'explanation_input_object_logit.joblib', 'XGB': 'explanation_input_object_xgb.joblib'}
